{"version":3,"sources":["images/image1.jpeg","images/image2.jpeg","images/image3.jpeg","images/image4.jpeg","images/image5.jpeg","images/image6.jpeg","images/image7.jpeg","components/mycarousel.js","components/bootstrapCarousel.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","MyCarousel","props","prevSlide","state","currentIndex","setState","images","length","translateValue","slideWidth","prevState","nextSlide","document","querySelector","clientWidth","className","style","transform","this","transition","map","image","i","key","Component","Slide","styles","backgroundImage","backgroundSize","backgroundRepeat","PreviousButton","onClick","NextButton","BootstrapCarousel","firstImage","slice","id","data-ride","data-interval","src","alt","imageSource","index","href","role","data-slide","aria-hidden","App","image1","image2","image3","image4","image5","image6","image7","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5f5507d4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/image1.9d3e272d.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/image2.08f5debb.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/image3.ff333bc1.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/image4.1c0326b6.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/image5.331c38e6.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/image6.19d7cdb7.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/image7.74f55b70.jpeg\";","import React, { Component } from 'react';\n\nimport './styles.css';\n\nclass MyCarousel extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            images: this.props.images,\n            currentIndex: 0,\n            translateValue: 0,\n        };\n    };\n\n    //go to previous slide\n    prevSlide = () => {\n        //check if this is the first slide and loop to the end\n        if (this.state.currentIndex === 0)\n            return this.setState({\n                currentIndex: this.state.images.length - 1,\n                translateValue: -(this.slideWidth() * (this.state.images.length - 1)),\n            });\n\n        //else update index and translate value\n        var prevState = this.state;\n        this.setState({\n            currentIndex: prevState.currentIndex - 1,\n            translateValue: prevState.translateValue + this.slideWidth(),\n        });\n    };\n\n    //go to next slide\n    nextSlide = () => {\n        //check if it is the last slide, if true return to first\n        if (this.state.currentIndex === this.state.images.length - 1) {\n            return this.setState({\n                currentIndex: 0,\n                translateValue: 0,\n            });\n        }\n\n        //else update index and translate value\n        this.setState(prevState => ({\n            currentIndex: prevState.currentIndex + 1,\n            translateValue: prevState.translateValue - this.slideWidth(),\n        }));\n    };\n\n    //get slide width\n    slideWidth = () => {\n        //can be hardcoded too because all images are same size and the value is already hardcoded on the css\n        return document.querySelector('.slide').clientWidth;\n    };\n\n    render() {\n        return (\n            <div className=\"slider\">\n                <div className=\"slide-wrapper\" style={{\n                    transform: `translateX(${this.state.translateValue}px)`, transition: 'transform ease-out 0.45s'\n                }}>\n                    {this.state.images.map((image, i) =>\n                        <Slide key={i} image={image}></Slide>)}\n                </div>\n                <PreviousButton prevSlide={this.prevSlide} />\n                <NextButton nextSlide={this.nextSlide} />\n            </div>\n        );\n    };\n}\n\n//Slide, PreviousButton, and NextButton \n//Background image changes\nconst Slide = ({ image }) => {\n    const styles = {\n        backgroundImage: `url(${image})`,\n        backgroundSize: 'cover',\n        backgroundRepeat: 'no-repeat',\n    };\n    return (\n        <div className=\"slide\" style={styles}></div>\n\n    );\n};\n\n//OnClick > previous slide change\nconst PreviousButton = props => {\n    return (\n        <div className=\"prevButton\" onClick={props.prevSlide}>\n            &#8249;\n        </div>\n    );\n};\n\n//OnClick > next slide change\nconst NextButton = props => {\n    return (\n        <div className=\"nextButton\" onClick={props.nextSlide}>\n            &#8250;\n    </div>\n    );\n}\n\nexport default MyCarousel;","import React, { Component } from 'react';\n\nimport './styles.css';\n\nclass BootstrapCarousel extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            firstImage: this.props.images[0],\n            images: this.props.images.slice(1),\n        }\n    };\n    render() {\n        return (\n            <div id=\"carousel-bootstrap\" className=\"carousel slide\" data-ride=\"carousel\" data-interval=\"false\">\n                <div className=\"carousel-inner\">\n                    <div className=\"carousel-item active\">\n                        <img className=\"d-block w-100\" src={this.state.firstImage} alt=\"First slide\" />\n                    </div>\n\n                    {this.state.images.map((imageSource, index) =>\n                        <div className=\"carousel-item\" key ={index}>\n                            <img className=\"d-block w-100\" src={imageSource} alt=\"\"/>\n                        </div>)}\n                </div>\n                <a className=\"carousel-control-prev\" href=\"#carousel-bootstrap\" role=\"button\" data-slide=\"prev\">\n                    <span className=\"carousel-control-prev-icon\" aria-hidden=\"true\"></span>\n                    <span className=\"sr-only\">Previous</span>\n                </a>\n                <a className=\"carousel-control-next\" href=\"#carousel-bootstrap\" role=\"button\" data-slide=\"next\">\n                    <span className=\"carousel-control-next-icon\" aria-hidden=\"true\"></span>\n                    <span className=\"sr-only\">Next</span>\n                </a>\n            </div>\n        );\n    };\n}\n\nexport default BootstrapCarousel;","import React, { Component } from 'react';\nimport './App.css';\n\nimport image1 from './images/image1.jpeg';\nimport image2 from './images/image2.jpeg';\nimport image3 from './images/image3.jpeg';\nimport image4 from './images/image4.jpeg';\nimport image5 from './images/image5.jpeg';\nimport image6 from './images/image6.jpeg';\nimport image7 from './images/image7.jpeg';\n\nimport MyCarousel from './components/mycarousel';\nimport BootstarpCarousel from './components/bootstrapCarousel';\n\n\nclass App extends Component {\n  render() {\n    const images = [\n      image1, image2, image3, image4, image5, image6, image7,\n    ];\n    return (\n      <div className=\"App\">\n        <div className=\"carousel-custom-container\">\n          <h1>REACT CAROUSEL</h1>\n          <MyCarousel images={images}></MyCarousel>\n        </div>\n        <div className=\"carousel-bootstrap-container\">\n          <h1>BOOTSTRAP CAROUSEL</h1>\n          <BootstarpCarousel images={images}></BootstarpCarousel>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport $ from 'jquery';\nimport Popper from 'popper.js';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}